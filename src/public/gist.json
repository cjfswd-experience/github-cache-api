[{"url":"https://gist.github.com/78912f71ede8b2b89eb0b11fa5d105d7","description":"useful git snippets.","files":[{"name":"git_snippets.md","text":"**discard all unstaged files**    \ngit restore .\n\n**undo git add**  \ngit reset .\n\n**add current staged changes to the last commit**  \ngit commit --amend --no-edit\n\n**copy commit by id**  \ngit cherry-pick 'commitID'\n\n**sync with remote**   \ngit fetch --prune\n\n**interactive rebase in entire branch**  \ngit rebase -i --root 'branchName'\n\n**push to all branchs**  \ngit push -all 'remoteName' \n\n**ignore case sensitivity**  \ngit config core.ignorecase true\n\n**get remote url**  \ngit remote show origin"}]},{"url":"https://gist.github.com/e003f8b16a094d00cd2bb5499c621b42","description":"useful cmd snippets.","files":[{"name":"cmd_snippets.md","text":"**Create file**  \ntype nul > readme.md"}]},{"url":"https://gist.github.com/663a44d2bcdae0febc5d432da84c4921","description":"useful windows shortcuts.","files":[{"name":"windows_shortcuts.md","text":"**Create folder**: Ctrl + Shift + N  \n\n**Print only active window**: Alt + PrintScreenButton \n\n**Open Task View**: Windows+Tab  \n**Create a new virtual desktop**: Windows+Ctrl+D  \n**Switch between virtual desktops**: Windows+Ctrl+Left or Right Arrow  \n**Close the current virtual desktop**: Windows+Ctrl+F4 "}]},{"url":"https://gist.github.com/256d7c5ae2150d3fe7918340ff228176","description":"Vue 3 Composition API snippets","files":[{"name":"vue3_snippets.js","text":"// Persist at localStorage with watchEffect\nwatchEffect(() => localStorage.setItem('database', JSON.stringify(state)))"}]},{"url":"https://gist.github.com/25571a2844203672dad5d9227706b003","description":"javascript snippets","files":[{"name":"javascript_snippets.js","text":"// change replace all of substring\nstr.replace(/foo/g, \"bar\")\n\n// destructuring: remove attribute and create new object \nconst { json, ...withoutJson } = data\n\n// get blob from any path or url\nconst getBlob = async (path: string) => {\n  return fetch(path).then(res => res.blob())\n}\n\n// method chaining\nconst dog = {\n  is: null,\n  log: () => console.log(this.is),\n  bark() {\n    this.is = \"woofing\";\n    this.log();\n    return this;\n  },\n  walk() {\n    this.is = \"walking\";\n    this.log();\n    return this;\n  },\n  eat() {\n    this.is = \"eating\";\n    this.log();\n    return this;\n  }\n};\n\ndog\n  .bark()\n  .eat()\n  .walk();\n\n"}]},{"url":"https://gist.github.com/6203aefa24b0f83e62211f5d0e586b4f","description":"reset CSS HTML5 version","files":[{"name":"css_reset.css","text":"html, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n    margin:0;\n    padding:0;\n    border:0;\n    outline:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n}\n\nbody {\n    line-height:1;\n}\n\narticle,aside,details,figcaption,figure,\nfooter,header,hgroup,menu,nav,section { \n    display:block;\n}\n\nnav ul {\n    list-style:none;\n}\n\nblockquote, q {\n    quotes:none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content:'';\n    content:none;\n}\n\na {\n    margin:0;\n    padding:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n}\n\n/* change colours to suit your needs */\nins {\n    background-color:#ff9;\n    color:#000;\n    text-decoration:none;\n}\n\n/* change colours to suit your needs */\nmark {\n    background-color:#ff9;\n    color:#000; \n    font-style:italic;\n    font-weight:bold;\n}\n\ndel {\n    text-decoration: line-through;\n}\n\nabbr[title], dfn[title] {\n    border-bottom:1px dotted;\n    cursor:help;\n}\n\ntable {\n    border-collapse:collapse;\n    border-spacing:0;\n}\n\n/* change border colour to suit your needs */\nhr {\n    display:block;\n    height:1px;\n    border:0;   \n    border-top:1px solid #cccccc;\n    margin:1em 0;\n    padding:0;\n}\n\ninput, select {\n    vertical-align:middle;\n}"}]},{"url":"https://gist.github.com/ff0696e7fbd9751247e8c20350c83e33","description":"detect if is mobile browser with javascript","files":[{"name":"javascript_ismobile.js","text":"(function(a,b){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))window.location=b})(navigator.userAgent||navigator.vendor||window.opera,'http://detectmobilebrowser.com/mobile');"}]},{"url":"https://gist.github.com/db2ead0d4a8123ca79ff17e41fa1b6d5","description":"node http proxy","files":[{"name":"node_proxy.js","text":"import http from \"http\";\nimport httpProxy from \"http-proxy\"\n\nconst port = 80\n\nconst proxy = httpProxy.createProxyServer()\n\nhttp.createServer((req, res) => {\n    console.log(req.url)\n    if(/^\\/project-gaming/.test(req.url)){\n        req.url = req.url.replace(/^\\/project-gaming/, \"\")\n        proxy.web(req, res, {target: 'http://localhost:3001'})\n    }else{\n        proxy.web(req, res, {target: 'http://localhost:3000'})\n    }\n}).listen(port)"}]},{"url":"https://gist.github.com/a4116a22e2330cb3887e4d6c66fcddd9","description":"change browser default theme by css","files":[{"name":"css_vanilla_darkmode.css","text":"/* supported on Chrome 81, Firefox 96 and Safari 13 */\n:root {\n  color-scheme: dark;\n}"}]},{"url":"https://gist.github.com/45197407cc3377b0088b23ce7ecb9fd5","description":"nuxt 3 parse http endpoint dynamically","files":[{"name":"nuxt3_dynamic_endpoint.js","text":"export default defineEventHandler((event) => {\n  let { req, res } = event;\n  const params = String(event.context.params._).split('/').filter(item => item != '')\n\n  if (params.length == 0) {\n    switch (req.method) {\n      case \"GET\":\n        res.statusCode = 200\n        return 'All resources getted with success.';\n      case \"POST\":\n        res.statusCode = 201\n        return 'Resource created with success.';\n      default:\n        res.statusCode = 405\n        res.setHeader('Allow', ['GET', 'POST'])\n        return `${event.req.method} Method not allowed.`\n    }\n  }\n  if (params.length == 1) {\n    const id = Number(params[0]);\n    switch (req.method) {\n      case \"GET\":\n        res.statusCode = 200\n        return 'Resource getted with success.';\n      case \"PUT\":\n        res.statusCode = 200\n        return `Resource { Id: ${id} } updated with success.`;\n      case \"DELETE\":\n        res.statusCode = 200\n        return `Resource { Id: ${id} } deleted with success.`;\n      default:\n        res.statusCode = 405\n        res.setHeader('Allow', ['GET', 'PUT', 'DELETE'])\n        return `${event.req.method} Method not allowed.`\n    }\n  }\n  if (params.length > 1) {\n    res.statusCode = 400\n    return 'Bad Request.';\n  }\n})\n"}]},{"url":"https://gist.github.com/7ec5bf875ddda78de13bb544d002bbe5","description":"next.js parse http endpoint dynamically","files":[{"name":"next.js_dynamic_endpoint.js","text":"import type { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { slug } = req.query;\n\n  type HTTP_METHOD =\n    | \"GET\"\n    | \"HEAD\"\n    | \"POST\"\n    | \"PUT\"\n    | \"DELETE\"\n    | \"CONNECT\"\n    | \"OPTIONS\"\n    | \"TRACE\"\n    | \"PATCH\";\n\n  const setHeaderAndSendMessage = (\n    header: { name: string; value: Array<HTTP_METHOD> },\n    message: { statusCode: number; method: HTTP_METHOD }\n  ) => {\n    res.setHeader(header.name, header.value);\n    res\n      .status(message.statusCode)\n      .send(`${message.method} Method Not Allowed.`);\n  };\n\n  if (slug == null) {\n    switch (req.method) {\n      case \"GET\":\n        res.status(200).send(`All resources getted with success.`);\n        break;\n      case \"POST\":\n        res.status(201).send(`Resource created with success.`);\n        break;\n      default:\n        setHeaderAndSendMessage(\n          { name: \"Allow\", value: [\"GET\", \"POST\"] },\n          { statusCode: 405, method: req.method as HTTP_METHOD }\n        );\n        break;\n    }\n  }\n\n  if (slug && slug!.length === 1) {\n    const id = Number(slug[0]);\n    switch (req.method) {\n      case \"GET\":\n        res.status(200).send(`Resource { Id: ${id} } getted with success.`);\n        break;\n      case \"PUT\":\n        res.status(200).send(`Resource { Id: ${id} } updated with success.`);\n        break;\n      case \"DELETE\":\n        res.status(200).send(`Resource { Id: ${id} } deleted with success.`);\n        break;\n      default:\n        setHeaderAndSendMessage(\n          { name: \"Allow\", value: [\"GET\", \"PUT\", \"DELETE\"] },\n          { statusCode: 405, method: req.method as HTTP_METHOD }\n        );\n        break;\n    }\n  }\n  \n  if(slug && slug.length > 1){\n    res.status(400).send(`Bad Request.`);\n  }\n}"}]},{"url":"https://gist.github.com/39978b736aef59d791686fc062d8243f","description":"discord rest api get all messages from channel","files":[{"name":"api_discord_get_channel_messages.js","text":"import fs from 'fs'\nimport fetch from 'cross-fetch';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst TOKEN = process.env.TOKEN || ''\nconst GUILD_URL = process.env.GUILD_URL || ''\n\nclass IGuild {\n    id: string\n    name: string\n    constructor(guild: IGuild) {\n        this.id = guild.id\n        this.name = guild.name\n    }\n}\n\nlet guildChannels = await fetch(\n    `${GUILD_URL}/channels`,\n    {\n        headers: {\n            'authorization': TOKEN\n        }\n    })\n    .then(res => res.json())\n    .then((res: IGuild[]) => {\n        return res.map(item => { return new IGuild(item) })\n            .filter(res => !['Text Channels', 'Voice Channels', 'General'].includes(res.name))\n    })\n\nlet channelsMessages = await Promise.all(guildChannels.map(async item => {\n    const messageReq = await fetch(`https://discord.com/api/channels/${item.id}/messages`, {\n        headers: {\n            'authorization': TOKEN\n        }\n    }).then(res => res.json()).catch(err => console.log(JSON.stringify(err)))\n    return messageReq\n}\n))\n\nlet mergeChannelsAndMessages = guildChannels.map((item, index) => {\n    return {\n        //@ts-ignore\n        ...item, images: [...[].concat.apply([], channelsMessages[index].map(item => item.attachments)).map(item => item.url)]\n    }\n})\n\nlet finalObject = [...mergeChannelsAndMessages]\n\nfs.writeFileSync('public/cache.json', JSON.stringify(finalObject), 'utf8')"}]},{"url":"https://gist.github.com/0dbf9e82713cf4ca779aaebd04f30f60","description":"github action to generate schedule cache files","files":[{"name":"actions_cache.yml","text":"name: Generate cache file  \n\non:\n  # Triggers the workflow everyday\n  schedule:\n  - cron: '0 0 * * *'\n      \njobs:\n  build:\n    runs-on: ubuntu-latest\n    environment: app\n    name: build and push\n    steps:\n    - name: git-checkout\n      uses: actions/checkout@v2\n      with: { ref: development }\n    - name: 'Create env file'\n      run: |\n          touch .env\n          echo TOKEN=${{ secrets.TOKEN }} >> .env\n          echo GUILD_URL=${{ secrets.GUILD_URL }} >> .env\n          cat .env\n    - name: install dependencies\n      run: npm install\n    - name: build\n      run: npm run build # The build command of your project\n    - name: start\n      run: npm run start # The build command of your project\n    - name: push\n      uses: s0/git-publish-subdir-action@develop\n      env:\n        REPO: self\n        BRANCH: deploy # The branch name where you want to push the assets\n        SQUASH_HISTORY: true # true = reset history, false = mantain history\n        FOLDER: public # The directory where your assets are generated\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token"}]},{"url":"https://gist.github.com/c4c4e7d8af4ca84d664e318b587a42e3","description":"github action to deploy with github pages","files":[{"name":"actions_deploy.yml","text":"name: deploy  \n\non:\n  # Triggers the workflow on push\n  push:\n    branches: \n      - development\n      \npermissions: write-all\n      \njobs:\n  build:\n    runs-on: ubuntu-latest\n    environment: app\n    name: build and push\n    steps:\n    - name: git-checkout\n      uses: actions/checkout@v3\n      with:\n        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.\n        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.\n    - name: install dependencies\n      run: npm install\n    - name: build\n      run: npm run generate # The build command of your project\n    - name: push\n      uses: s0/git-publish-subdir-action@develop\n      env:\n        REPO: self\n        BRANCH: deploy # The branch name where you want to push the assets\n        SQUASH_HISTORY: true\n        FOLDER: .output/public # The directory where your assets are generated\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token"}]},{"url":"https://gist.github.com/560bc4839b09fa7eb3a1d94af49fdbdb","description":"typing environment variables at typescript project","files":[{"name":"typescript_environment.js","text":"declare global {\n    namespace NodeJS  {\n        interface ProcessEnv {\n            VARIABLE_NAME: string;\n        }\n    }\n}\n\nexport { }\n\n"}]},{"url":"https://gist.github.com/635c0184df572b600d70b3b2d20220d5","description":"typescript singleton","files":[{"name":"typescript_singleton.js","text":"export namespace server {\n    export let database: { title: string, message: string }[] = []\n} "}]},{"url":"https://gist.github.com/b60ef255f7d532df5195239949700213","description":"type to path into object keys with typescript,","files":[{"name":"typescript_path.ts","text":"type PathInto<T extends Record<string, any>> = keyof {\n  [K in keyof T as T[K] extends string\n  ? K\n  : T[K] extends Record<string, any>\n  ? `${K & string}.${PathInto<T[K]> & string}`\n  : never]: any\n}\n\ntype PathTrace<T, K extends keyof T = keyof T> =\n    K extends string\n    ? T[K] extends Record<string, any>\n        ? `${K}.${Path<T[K]>}`\n        : K\n    : never;"}]},{"url":"https://gist.github.com/6512070e386725a16a0c46bc5f82efb0","description":"typescript type to get an plain object attribute depth.","files":[{"name":"typescript_plain_object.ts","text":"export type PlainObject<T> = { [K in keyof T]: T[K] extends object ? never : T[K] };"}]}]